{"ast":null,"code":"const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT';\nexport const getPosts = async token => {\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const results = await response.json();\n    return results;\n  } catch (error) {\n    console.log('error getting all posts');\n  }\n};\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.log(\"error registering user\");\n  }\n};\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.log(\"error user is not registered\");\n  }\n};\nexport const getUserProfile = async token => {\n  try {\n    const response = await fetch(`${baseURL}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.log(\"error, could not get user profile\");\n  }\n};\nexport const createPost = async () => {\n  try {} catch (error) {}\n};","map":{"version":3,"names":["baseURL","getPosts","token","response","fetch","headers","results","json","error","console","log","registerUser","username","password","method","body","JSON","stringify","user","result","loginUser","getUserProfile","createPost"],"sources":["/Users/rachaelroyack/Library/Mobile Documents/com~apple~CloudDocs/WINDOWS-CODING-CLASS/CODING-CLASS/Desktop/web-projects/coding-class/course_work/StrangerThings/src/api/index.js"],"sourcesContent":["const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT'\n\nexport const getPosts = async (token) => {\n    try {\n        const response = await fetch(`${baseURL}/posts`, {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n            }})\n        const results = await response.json()\n\n        return results\n\n\n    } catch (error) {\n        console.log ('error getting all posts')\n    }\n    \n\n}\n\nexport const registerUser = async (username,password) => {\n    try {\n        const response = await fetch (`${baseURL}/users/register`, {\n            method: \"POST\",\n            headers: {\n            'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n            user: {\n                username: username,\n                password: password\n            }\n            })\n        }) \n        const result = await response.json();\n\n        return result\n\n    } catch (error) {\n        console.log(\"error registering user\")\n    }\n}\n\nexport const loginUser = async (username,password) => {\n    try {\n        const response = await fetch (`${baseURL}/users/login`, {\n            method: \"POST\",\n            headers: {\n            'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n            user: {\n                username: username,\n                password: password\n            }\n            })\n        }) \n        const result = await response.json();\n\n        return result\n\n    } catch (error) {\n        console.log(\"error user is not registered\")\n    }\n}\n\nexport const getUserProfile = async (token) => {\n    try {\n        const response = await fetch(`${baseURL}/users/me`, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${token}`\n            },\n        }) \n        const result = await response.json();\n\n        return result\n\n    } catch (error) {\n        console.log(\"error, could not get user profile\")\n    }\n}\n\nexport const createPost = async () => {\n    try {\n\n    } catch (error) {\n        \n    }\n}"],"mappings":"AAAA,MAAMA,OAAO,GAAG,+DAAhB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAOC,KAAP,IAAiB;EACrC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,QAAZ,EAAqB;MACjDK,OAAO,EAAE;QACL,gBAAgB,kBADX;QAEL,iBAAkB,UAASH,KAAM;MAF5B;IADwC,CAArB,CAA5B;IAKA,MAAMI,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAtB;IAEA,OAAOD,OAAP;EAGH,CAXD,CAWE,OAAOE,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAa,yBAAb;EACH;AAGJ,CAjBM;AAmBP,OAAO,MAAMC,YAAY,GAAG,OAAOC,QAAP,EAAgBC,QAAhB,KAA6B;EACrD,IAAI;IACA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAG,GAAEJ,OAAQ,iBAAb,EAA+B;MACvDc,MAAM,EAAE,MAD+C;MAEvDT,OAAO,EAAE;QACT,gBAAgB;MADP,CAF8C;MAKvDU,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACrBC,IAAI,EAAE;UACFN,QAAQ,EAAEA,QADR;UAEFC,QAAQ,EAAEA;QAFR;MADe,CAAf;IALiD,CAA/B,CAA5B;IAYA,MAAMM,MAAM,GAAG,MAAMhB,QAAQ,CAACI,IAAT,EAArB;IAEA,OAAOY,MAAP;EAEH,CAjBD,CAiBE,OAAOX,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAY,wBAAZ;EACH;AACJ,CArBM;AAuBP,OAAO,MAAMU,SAAS,GAAG,OAAOR,QAAP,EAAgBC,QAAhB,KAA6B;EAClD,IAAI;IACA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAG,GAAEJ,OAAQ,cAAb,EAA4B;MACpDc,MAAM,EAAE,MAD4C;MAEpDT,OAAO,EAAE;QACT,gBAAgB;MADP,CAF2C;MAKpDU,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACrBC,IAAI,EAAE;UACFN,QAAQ,EAAEA,QADR;UAEFC,QAAQ,EAAEA;QAFR;MADe,CAAf;IAL8C,CAA5B,CAA5B;IAYA,MAAMM,MAAM,GAAG,MAAMhB,QAAQ,CAACI,IAAT,EAArB;IAEA,OAAOY,MAAP;EAEH,CAjBD,CAiBE,OAAOX,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAY,8BAAZ;EACH;AACJ,CArBM;AAuBP,OAAO,MAAMW,cAAc,GAAG,MAAOnB,KAAP,IAAiB;EAC3C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,WAAZ,EAAwB;MAChDK,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEP,iBAAkB,UAASH,KAAM;MAF1B;IADuC,CAAxB,CAA5B;IAMA,MAAMiB,MAAM,GAAG,MAAMhB,QAAQ,CAACI,IAAT,EAArB;IAEA,OAAOY,MAAP;EAEH,CAXD,CAWE,OAAOX,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAY,mCAAZ;EACH;AACJ,CAfM;AAiBP,OAAO,MAAMY,UAAU,GAAG,YAAY;EAClC,IAAI,CAEH,CAFD,CAEE,OAAOd,KAAP,EAAc,CAEf;AACJ,CANM"},"metadata":{},"sourceType":"module"}