{"ast":null,"code":"const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT';\nexport const getPosts = async t => {\n  try {\n    const response = await fetch(`${baseURL}/posts`);\n    const results = await response.json();\n    return results;\n  } catch (error) {\n    console.log('error getting all posts');\n  }\n};\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.log(\"error registering user\");\n  }\n};\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.log(\"error user is not registered\");\n  }\n};\nexport const getUserProfile = async token => {\n  try {\n    const response = await fetch(`${baseURL}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.log(\"error, could not get user profile\");\n  }\n};","map":{"version":3,"names":["baseURL","getPosts","t","response","fetch","results","json","error","console","log","registerUser","username","password","method","headers","body","JSON","stringify","user","result","loginUser","getUserProfile","token"],"sources":["/Users/rachaelroyack/Library/Mobile Documents/com~apple~CloudDocs/WINDOWS-CODING-CLASS/CODING-CLASS/Desktop/web-projects/coding-class/course_work/StrangerThings/src/api/index.js"],"sourcesContent":["const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT'\n\nexport const getPosts = async (t) => {\n    try {\n        const response = await fetch(`${baseURL}/posts`)\n        const results = await response.json()\n\n        return results\n\n\n    } catch (error) {\n        console.log ('error getting all posts')\n    }\n    \n\n}\n\nexport const registerUser = async (username,password) => {\n    try {\n        const response = await fetch (`${baseURL}/users/register`, {\n            method: \"POST\",\n            headers: {\n            'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n            user: {\n                username: username,\n                password: password\n            }\n            })\n        }) \n        const result = await response.json();\n\n        return result\n\n    } catch (error) {\n        console.log(\"error registering user\")\n    }\n}\n\nexport const loginUser = async (username,password) => {\n    try {\n        const response = await fetch (`${baseURL}/users/login`, {\n            method: \"POST\",\n            headers: {\n            'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n            user: {\n                username: username,\n                password: password\n            }\n            })\n        }) \n        const result = await response.json();\n\n        return result\n\n    } catch (error) {\n        console.log(\"error user is not registered\")\n    }\n}\n\nexport const getUserProfile = async (token) => {\n    try {\n        const response = await fetch(`${baseURL}/users/me`, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${token}`\n            },\n        }) \n        const result = await response.json();\n\n        return result\n\n    } catch (error) {\n        console.log(\"error, could not get user profile\")\n    }\n}"],"mappings":"AAAA,MAAMA,OAAO,GAAG,+DAAhB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAOC,CAAP,IAAa;EACjC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,QAAZ,CAA5B;IACA,MAAMK,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;IAEA,OAAOD,OAAP;EAGH,CAPD,CAOE,OAAOE,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAa,yBAAb;EACH;AAGJ,CAbM;AAeP,OAAO,MAAMC,YAAY,GAAG,OAAOC,QAAP,EAAgBC,QAAhB,KAA6B;EACrD,IAAI;IACA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAG,GAAEJ,OAAQ,iBAAb,EAA+B;MACvDa,MAAM,EAAE,MAD+C;MAEvDC,OAAO,EAAE;QACT,gBAAgB;MADP,CAF8C;MAKvDC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACrBC,IAAI,EAAE;UACFP,QAAQ,EAAEA,QADR;UAEFC,QAAQ,EAAEA;QAFR;MADe,CAAf;IALiD,CAA/B,CAA5B;IAYA,MAAMO,MAAM,GAAG,MAAMhB,QAAQ,CAACG,IAAT,EAArB;IAEA,OAAOa,MAAP;EAEH,CAjBD,CAiBE,OAAOZ,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAY,wBAAZ;EACH;AACJ,CArBM;AAuBP,OAAO,MAAMW,SAAS,GAAG,OAAOT,QAAP,EAAgBC,QAAhB,KAA6B;EAClD,IAAI;IACA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAG,GAAEJ,OAAQ,cAAb,EAA4B;MACpDa,MAAM,EAAE,MAD4C;MAEpDC,OAAO,EAAE;QACT,gBAAgB;MADP,CAF2C;MAKpDC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACrBC,IAAI,EAAE;UACFP,QAAQ,EAAEA,QADR;UAEFC,QAAQ,EAAEA;QAFR;MADe,CAAf;IAL8C,CAA5B,CAA5B;IAYA,MAAMO,MAAM,GAAG,MAAMhB,QAAQ,CAACG,IAAT,EAArB;IAEA,OAAOa,MAAP;EAEH,CAjBD,CAiBE,OAAOZ,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAY,8BAAZ;EACH;AACJ,CArBM;AAuBP,OAAO,MAAMY,cAAc,GAAG,MAAOC,KAAP,IAAiB;EAC3C,IAAI;IACA,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,WAAZ,EAAwB;MAChDc,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEP,iBAAkB,UAASQ,KAAM;MAF1B;IADuC,CAAxB,CAA5B;IAMA,MAAMH,MAAM,GAAG,MAAMhB,QAAQ,CAACG,IAAT,EAArB;IAEA,OAAOa,MAAP;EAEH,CAXD,CAWE,OAAOZ,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAY,mCAAZ;EACH;AACJ,CAfM"},"metadata":{},"sourceType":"module"}